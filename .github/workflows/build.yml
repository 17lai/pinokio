name: Build/release

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        #os: [windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 22

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          #release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          #release: true
          release: false

      # Upload for windows
      - name: upload-unsigned-artifact
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist

  sign-windows:

    needs: build
    runs-on: windows-latest
    steps:

#      # Upload for windows
#      - name: upload-unsigned-artifact
#        if: matrix.os == 'windows-latest'
#        id: upload-unsigned-artifact
#        uses: actions/upload-artifact@v4
#        with:
#          path: dist

      # Sign for windows
      - id: Sign
        if: matrix.os == 'windows-latest'
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: 'd2da0df2-dc12-4516-8222-87178d5ebf3d'
          project-slug: 'pinokio'
          signing-policy-slug: 'test-signing'
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: './signed'
          parameters: |
            version: ${{ toJSON(github.ref_name) }}

  publish:
    needs: [build, sign-windows]
    runs-on: ubuntu-latest
    steps:

      - name: Get package.json version
        id: get_version
        shell: bash
        #run: echo "PACKAGE_VERSION=$(node -p 'require("./package.json").version')" >> $GITHUB_ENV
        run: echo 'PACKAGE_VERSION=$(node -p "require(\"./package.json\").version")' >> $GITHUB_ENV

      # Release the Windows Signed Binary
      - name: Publish GitHub Release with gh
        if: matrix.os == 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Releasing version $PACKAGE_VERSION"
          gh release create "v$PACKAGE_VERSION" ./signed/*.exe \
            --title "Release v$PACKAGE_VERSION" \
            --notes "Pinokio version $PACKAGE_VERSION."

      # Release the macOS and Linux binaries
      - name: Publish GitHub Release (Mac/Linux)
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Releasing version $PACKAGE_VERSION for ${{ matrix.os }}"
          gh release upload "v$PACKAGE_VERSION" dist/* --clobber


      - run: echo "Build completed"
